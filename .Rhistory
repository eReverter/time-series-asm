curve(dnorm(x,mean=mean(resid),sd=sd(resid)),col=2,add=T)
#ACF & PACF of residuals
par(mfrow=c(1,2))
acf(resid,ylim=c(-1,1),lag.max=60,col=c(2,rep(1,s-1)),lwd=1)
pacf(resid,ylim=c(-1,1),lag.max=60,col=c(rep(1,s-1),2),lwd=1)
par(mfrow=c(1,1))
#ACF & PACF of square residuals
par(mfrow=c(1,2))
acf(resid^2,ylim=c(-1,1),lag.max=60,col=c(2,rep(1,s-1)),lwd=1)
pacf(resid^2,ylim=c(-1,1),lag.max=60,col=c(rep(1,s-1),2),lwd=1)
par(mfrow=c(1,1))
#Ljung-Box p-values
par(mar=c(2,2,1,1))
tsdiag(model,gof.lag=7*s)
cat("\n--------------------------------------------------------------------\n")
print(model)
#Stationary and Invertible
cat("\nModul of AR Characteristic polynomial Roots: ",
Mod(polyroot(c(1,-model$model$phi))),"\n")
cat("\nModul of MA Characteristic polynomial Roots: ",
Mod(polyroot(c(1,model$model$theta))),"\n")
#Model expressed as an MA infinity (psi-weights)
psis=ARMAtoMA(ar=model$model$phi,ma=model$model$theta,lag.max=36)
names(psis)=paste("psi",1:36)
cat("\nPsi-weights (MA(inf))\n")
cat("\n--------------------\n")
print(psis[1:20])
#Model expressed as an AR infinity (pi-weights)
pis=-ARMAtoMA(ar=-model$model$theta,ma=-model$model$phi,lag.max=36)
names(pis)=paste("pi",1:36)
cat("\nPi-weights (AR(inf))\n")
cat("\n--------------------\n")
print(pis[1:20])
## Add here complementary tests (use with caution!)
##---------------------------------------------------------
cat("\nNormality Tests\n")
cat("\n--------------------\n")
##Shapiro-Wilks Normality test
print(shapiro.test(resid(model)))
suppressMessages(require(nortest,quietly=TRUE,warn.conflicts=FALSE))
##Anderson-Darling test
print(ad.test(resid(model)))
suppressMessages(require(tseries,quietly=TRUE,warn.conflicts=FALSE))
##Jarque-Bera test
print(jarque.bera.test(resid(model)))
cat("\nHomoscedasticity Test\n")
cat("\n--------------------\n")
suppressMessages(require(lmtest,quietly=TRUE,warn.conflicts=FALSE))
##Breusch-Pagan test
obs=get(model$series)
print(bptest(resid(model)~I(obs-resid(model))))
cat("\nIndependence Tests\n")
cat("\n--------------------\n")
##Durbin-Watson test
print(dwtest(resid(model)~I(1:length(resid(model)))))
##Ljung-Box test
cat("\nLjung-Box test\n")
print(t(apply(matrix(c(1:4,(1:4)*s)),1,function(el) {
te=Box.test(resid(model),type="Ljung-Box",lag=el)
c(lag=(te$parameter),statistic=te$statistic[[1]],p.value=te$p.value)})))
#Sample ACF vs. Teoric ACF
par(mfrow=c(2,2),mar=c(3,3,3,3))
acf(dades, ylim=c(-1,1) ,lag.max=36,main="Sample ACF")
plot(ARMAacf(model$model$phi,model$model$theta,lag.max=36),ylim=c(-1,1),
type="h",xlab="Lag",  ylab="", main="ACF Teoric")
abline(h=0)
#Sample PACF vs. Teoric PACF
pacf(dades, ylim=c(-1,1) ,lag.max=36,main="Sample PACF")
plot(ARMAacf(model$model$phi,model$model$theta,lag.max=36, pacf=T),ylim=c(-1,1),
type="h", xlab="Lag", ylab="", main="PACF Teoric")
abline(h=0)
par(mfrow=c(1,1))
}
################# Fi Validation #################################
ultim=time(lnserie)[(length(time(serie))-52)]
max_time=time(lnserie)[length(time(serie))]
serie2=window(serie,end=ultim)
lnserie2=log(serie2+1)
serie1=window(serie,end=max_time) # adds one year
lnserie1=log(serie1+1)
modA=arima(lnserie, order = c(2,1,2), seasonal = list(order=c(0,1,1), period=52))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
pred=predict(modB,n.ahead=52)
pr<-ts(c(tail(lnserie2,1),pred$pred),start=ultim,freq=52) # point prediction
se<-ts(c(0,pred$se),start=ultim,freq=52) # standard error
ts.plot(pr)
tl<-ts(exp(pr-1.96*se)-1,start=ultim,freq=52)
tu<-ts(exp(pr+1.96*se)-1,start=ultim,freq=52)
pr<-ts(exp(pr)-1,start=ultim,freq=52)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2019, 2021))
obs=window(serie,start=ultim)
pr=window(pr,start=ultim)
mod.RMSE1=sqrt(sum((obs-pr)^2)/12)
mod.MAE1=sum(abs(obs-pr))/12
mod.RMSPE1=sqrt(sum(((obs-pr)/obs)^2)/12)
mod.MAPE1=sum(abs(obs-pr)/obs)/12
data.frame("RMSE"=mod.RMSE1,"MAE"=mod.MAE1,"RMSPE"=mod.RMSPE1,"MAPE"=mod.MAPE1)
mCI1=mean(tu-tl)
cat("\nMean Length CI: ",mCI1)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2020))
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2019.5))
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2018.5))
period = 12
ultim=time(lnserie)[(length(time(serie))-period)]
max_time=time(lnserie)[length(time(serie))]
serie2=window(serie,end=ultim)
lnserie2=log(serie2+1)
serie1=window(serie,end=max_time) # adds one year
lnserie1=log(serie1+1)
modA=arima(lnserie, order = c(2,1,2), seasonal = list(order=c(0,1,1), period=period))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=period))
pred=predict(modB,n.ahead=52)
pr<-ts(c(tail(lnserie2,1),pred$pred),start=ultim,freq=period) # point prediction
se<-ts(c(0,pred$se),start=ultim,freq=period) # standard error
ts.plot(pr)
tl<-ts(exp(pr-1.96*se)-1,start=ultim,freq=period)
tu<-ts(exp(pr+1.96*se)-1,start=ultim,freq=period)
pr<-ts(exp(pr)-1,start=ultim,freq=period)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2018.5))
par(mfrow=c(1,1))
period = 12
ultim=time(lnserie)[(length(time(serie))-period)]
max_time=time(lnserie)[length(time(serie))]
serie2=window(serie,end=ultim)
lnserie2=log(serie2+1)
serie1=window(serie,end=max_time) # adds one year
lnserie1=log(serie1+1)
modA=arima(lnserie, order = c(2,1,2), seasonal = list(order=c(0,1,1), period=period))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=period))
pred=predict(modB,n.ahead=52)
pr<-ts(c(tail(lnserie2,1),pred$pred),start=ultim,freq=period) # point prediction
se<-ts(c(0,pred$se),start=ultim,freq=period) # standard error
ts.plot(pr)
tl<-ts(exp(pr-1.96*se)-1,start=ultim,freq=period)
tu<-ts(exp(pr+1.96*se)-1,start=ultim,freq=period)
pr<-ts(exp(pr)-1,start=ultim,freq=period)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2018.5))
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2018))
ultim
max_time
par(mfrow=c(1,1))
period = 12
ultim=time(lnserie)[(length(time(serie))-12)]
max_time=time(lnserie)[length(time(serie))]
serie2=window(serie,end=ultim)
lnserie2=log(serie2+1)
serie1=window(serie,end=max_time) # adds one year
lnserie1=log(serie1+1)
modA=arima(lnserie, order = c(2,1,2), seasonal = list(order=c(0,1,1), period=12))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=12))
pred=predict(modB,n.ahead=52)
pr<-ts(c(tail(lnserie2,1),pred$pred),start=ultim,freq=12) # point prediction
se<-ts(c(0,pred$se),start=ultim,freq=12) # standard error
ts.plot(pr)
tl<-ts(exp(pr-1.96*se)-1,start=ultim,freq=12)
tu<-ts(exp(pr+1.96*se)-1,start=ultim,freq=12)
pr<-ts(exp(pr)-1,start=ultim,freq=12)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2018))
ultim=time(lnserie)[(length(time(serie))-52)]
max_time=time(lnserie)[length(time(serie))]
serie2=window(serie,end=ultim)
lnserie2=log(serie2+1)
serie1=window(serie,end=max_time) # adds one year
lnserie1=log(serie1+1)
modA=arima(lnserie, order = c(2,1,2), seasonal = list(order=c(0,1,1), period=52))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
pred=predict(modB,n.ahead=52)
pr<-ts(c(tail(lnserie2,1),pred$pred),start=ultim,freq=52) # point prediction
se<-ts(c(0,pred$se),start=ultim,freq=52) # standard error
ts.plot(pr)
tl<-ts(exp(pr-1.96*se)-1,start=ultim,freq=52)
tu<-ts(exp(pr+1.96*se)-1,start=ultim,freq=52)
pr<-ts(exp(pr)-1,start=ultim,freq=52)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2019.5))
obs=window(serie,start=ultim)
pr=window(pr,start=ultim)
mod.RMSE1=sqrt(sum((obs-pr)^2)/12)
mod.MAE1=sum(abs(obs-pr))/12
mod.RMSPE1=sqrt(sum(((obs-pr)/obs)^2)/12)
mod.MAPE1=sum(abs(obs-pr)/obs)/12
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(forecast)
# Chunk 2
pre.who = read.csv("WHO_NREVSS_Combined_prior_to_2015_16.csv", header=TRUE, skip=1)
head(pre.who)
who.clinical = read.csv("WHO_NREVSS_Clinical_Labs.csv", header=TRUE, skip=1)
head(who.clinical)
who.public = read.csv("WHO_NREVSS_Public_Health_Labs.csv", header=TRUE, skip=1)
head(who.public)
# Chunk 3
pre.who.clean = pre.who %>%
filter(YEAR > 1997) %>%
mutate(DATE=sprintf("%s_%02d", YEAR, WEEK)) %>%
mutate(INF_ALL=ceiling(TOTAL.SPECIMENS * PERCENT.POSITIVE / 100)) %>%
filter(WEEK < 53) %>% #Filtering out last week for leap years.
select(c(DATE, WEEK, INF_ALL)) %>%
arrange(DATE) # Until 2015_39
who.clinical.clean = who.clinical %>% # From 2015_40 onwards
mutate(DATE=sprintf("%s_%02d", YEAR, WEEK)) %>%
mutate(INF_ALL=ceiling(TOTAL.SPECIMENS * PERCENT.POSITIVE / 100)) %>%
filter(WEEK < 53) %>% #Filtering out last week for leap years.
select(c(DATE, WEEK, INF_ALL)) %>%
arrange(DATE)
flu.strains = c("A..2009.H1N1.", "A..H3.", "A..Subtyping.not.Performed.", "B", "BVic", "BYam", "H3N2v")
who.public.clean = who.public %>%
mutate(DATE=sprintf("%s_%02d", YEAR, WEEK)) %>%
mutate(INF_ALL=rowSums(across(all_of(flu.strains)))) %>%
filter(WEEK < 53) %>% #Filtering out last week for leap years.
select(c(DATE, WEEK, INF_ALL)) %>%
arrange(DATE)
post.who.clean = who.clinical.clean %>%
left_join(who.public.clean, by="DATE") %>%
mutate(INF_ALL=INF_ALL.x + INF_ALL.y) %>%
select(DATE, INF_ALL)
flu.usa = pre.who.clean %>%
select(DATE, INF_ALL) %>%
bind_rows(post.who.clean)
idx_end <- which(flu.usa$DATE == "2020_01") #All weeks including this one should be ommitted. This way COVID is not
idxs_to_keep <- seq(1, idx_end-1, by=1) # included in the dataset and there are exactly 52 weeks per year.
flu.usa.final <- flu.usa[idxs_to_keep,]
# Chunk 4
flu.usa.ts = ts(flu.usa.final$INF_ALL, start=1998,frequency=52) #Lets not include covid for first analysis
serie = flu.usa.ts
# Chunk 5
par(mfrow=c(1,2))
plot(serie)
abline(v=1990:2022,col=4,lty=3)
lnserie <- log(serie + 1) #Log(x+1) instead of log(x) as log(x) generates infinities for zero values.
plot(lnserie)
abline(v=1990:2022,col=4,lty=3)
# Chunk 6
boxplot(serie~floor(time(serie)), xlab='time (years)')
# Chunk 7
boxplot(lnserie~floor(time(serie)), xlab='time (years)')
# Chunk 8
par(mfrow=c(1,2))
mserie = matrix(serie, ncol=52, byrow=TRUE)
m = apply(mserie, 1, mean) #Calculate Mean for each year
v = apply(mserie, 1, var) #Calculate Variance for each year
plot(v ~ m, xlab='mean', ylab='variance')
abline(lm(v ~ m), col=2, lty=3)
logmserie = matrix(lnserie, ncol=52, byrow=TRUE)
logm = apply(logmserie, 1, mean) #Calculate Mean for each year
logv = apply(logmserie, 1, var) #Calculate Variance for each year
plot(logv ~ logm, xlab='mean (lnserie)', ylab='variance')
abline(lm(logv ~ logm), col=2, lty=3)
# Chunk 9
?monthplot
monthplot(lnserie, xlab='time (weeks)')
# Chunk 10
ts.plot(matrix(lnserie, nrow=52), ylab='lnserie', xlab='time (weeks)')
# Chunk 11
d52lnserie <- diff(lnserie,52)
plot(d52lnserie, ylab = "seasonal difference lnserie", xlab="Time (years)")
abline(h=0)
# Chunk 12
monthplot(d52lnserie, ylab = "seasonal difference lnserie", xlab="time (weeks)")
# Chunk 13
d1d52lnserie <- diff(d52lnserie)
plot(d1d52lnserie, ylab = "seas. + reg. diff. lnserie", xlab="Time (years)")
abline(h=0)
# Chunk 14
d1d1d52lnserie <- diff(d1d52lnserie)
plot(d1d1d52lnserie, ylab = "seas. + 2 x reg. diff. lnserie", xlab="Time (years)")
abline(h=0)
# Chunk 15
var(lnserie)
var(d52lnserie)
var(d1d52lnserie)
var(d1d1d52lnserie)
# Chunk 16
par(mfrow=c(1,2))
#For Seasonal Part
acf(d1d52lnserie, ylim=c(-1,1), lag.max = 400,col=c(2,rep(1,51)),lwd=2)
pacf(d1d52lnserie, ylim=c(-1,1), lag.max = 400,col=c(rep(1,51),2),lwd=2)
# Chunk 17
par(mfrow=c(1,2))
#For Regular Part
acf(d1d52lnserie, ylim=c(-1,1), lag.max = 80,col=c(2,rep(1,51)),lwd=2)
pacf(d1d52lnserie, ylim=c(-1,1), lag.max = 80,col=c(rep(1,51),2),lwd=2)
model2_coef_change<-arima(lnserie, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
model2_coef_change$aic
model2_coef_change$coef
cat("\nT-ratios:",round(model2_coef_change$coef/sqrt(diag(model2_coef_change$var.coef)),2))
cat("\nSignificant?:",abs(model2_coef_change$coef/sqrt(diag(model2_coef_change$var.coef)))>2)
model2 = model2_coef_change
predicted=forecast(model2, 52)
plot(predicted, xlim=c(1997,2022), xlab='Years')
ultim=time(lnserie)[(length(time(serie))-12)]
max_time=time(lnserie)[length(time(serie))]
serie2=window(serie,end=ultim)
lnserie2=log(serie2+1)
serie1=window(serie,end=max_time) # adds one year
lnserie1=log(serie1+1)
modA=arima(lnserie, order = c(2,1,2), seasonal = list(order=c(0,1,1), period=52))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
modA=arima(lnserie, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
pred=predict(modB,n.ahead=52)
pred=predict(modB,n.ahead=12)
pr<-ts(c(tail(lnserie2,1),pred$pred),start=ultim,freq=52) # point prediction
se<-ts(c(0,pred$se),start=ultim,freq=52) # standard error
ts.plot(pr)
tl<-ts(exp(pr-1.96*se)-1,start=ultim,freq=52)
tu<-ts(exp(pr+1.96*se)-1,start=ultim,freq=52)
pr<-ts(exp(pr)-1,start=ultim,freq=52)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2019.5))
par(mfrow=c(1,1))
ultim=time(lnserie)[(length(time(serie))-12)]
max_time=time(lnserie)[length(time(serie))]
modA=arima(lnserie, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
pred=predict(modB,n.ahead=12)
pr<-ts(c(tail(lnserie2,1),pred$pred),start=ultim,freq=52) # point prediction
se<-ts(c(0,pred$se),start=ultim,freq=52) # standard error
ts.plot(pr)
tl<-ts(exp(pr-1.96*se)-1,start=ultim,freq=52)
tu<-ts(exp(pr+1.96*se)-1,start=ultim,freq=52)
pr<-ts(exp(pr)-1,start=ultim,freq=52)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2020))
obs=window(serie,start=ultim)
pr=window(pr,start=ultim)
mod.RMSE1=sqrt(sum((obs-pr)^2)/12)
mod.MAE1=sum(abs(obs-pr))/12
mod.RMSPE1=sqrt(sum(((obs-pr)/obs)^2)/12)
mod.MAPE1=sum(abs(obs-pr)/obs)/12
data.frame("RMSE"=mod.RMSE1,"MAE"=mod.MAE1,"RMSPE"=mod.RMSPE1,"MAPE"=mod.MAPE1)
mCI1=mean(tu-tl)
cat("\nMean Length CI: ",mCI1)
predicted=forecast(model2, 52)
plot(predicted, xlim=c(1997,2021), xlab='Years')
plot(predicted, xlim=c(2010,2021), xlab='Years')
plot(decompose(lnserie))
source("atipics2.r")
mod.atip=outdetec(model2,dif=c(1,52), crit=2.9, LS=T) # automatic detection of outliers with crit=2.8 and LS =TRUE
#Estimated residual variance after outliers detection and treatment
mod.atip$sigma
atipics=mod.atip$atip[order(mod.atip$atip[,1]),]
weeks = c()
for (w in seq(1, 52)) {
week = sprintf("%02d", w)
weeks = append(weeks, week)
}
data.frame(atipics,Fecha=paste(weeks[(atipics[,1]-1)%%52+1],start(lnserie)[1]+((atipics[,1]-1)%/%52)),perc.Obs=exp(atipics[,3])*100)
lnserie.lin=lineal(lnserie, mod.atip$atip)
serie.lin=exp(lnserie.lin)
plot(serie.lin,col=2)
lines(serie)
plot(lnserie-lnserie.lin)
d1d12lnserie.lin=diff(diff(lnserie.lin,52))
par(mfrow=c(1,2))
acf(d1d12lnserie.lin,ylim=c(-1,1),lag.max=72,col=c(2,rep(1,51)),lwd=2)
pacf(d1d12lnserie.lin,ylim=c(-1,1),lag.max=72,col=c(rep(1,51),2),lwd=2)
par(mfrow=c(1,1))
(mod.lin=arima(lnserie.lin,order=c(2,1,1),seasonal=list(order=c(0,1,1),period=52)))
dades=d1d12lnserie.lin  #stationary
model=mod.lin  #Fitted ARIMA model to the log-linearized series
validation(model,dades)
ultim=time(serie.lin)[(length(time(serie))-12)]
max_time=time(serie.lin)[length(time(serie.lin))]
pdq=c(2,1,1)
PDQ=c(0,1,1)
serie1.lin=window(serie.lin,end=max_time)
lnserie1.lin=log(serie1.lin)
serie2.lin=window(serie.lin,end=ultim)
lnserie2.lin=log(serie2.lin)
(mod.lin=arima(lnserie1.lin,order=pdq,seasonal=list(order=PDQ,period=52)))
(mod2.lin=arima(lnserie2.lin,order=pdq,seasonal=list(order=PDQ,period=52)))
pred=predict(mod2.lin,n.ahead=12)
wLS=sum(mod.atip$atip[mod.atip$atip$type_detected=="LS" & mod.atip$atip$Obs<=length(serie)-52,3])
predic=pred$pr+wLS
pr<-ts(c(tail(lnserie2,1),predic),start=ultim,freq=52) #puntual predictions (log-scale) obtained
se<-ts(c(0,pred$se),start=ultim,freq=52) #Standard errors for puntual predictions
##Prediction Intervals (back transformed to original scale using exp-function)
tl<-ts(exp(pr-1.96*se),start=ultim,freq=52)
tu<-ts(exp(pr+1.96*se),start=ultim,freq=52)
pr<-ts(exp(pr),start=ultim,freq=52)
#Plot of the original airbcn series (thousands) and out-of-sample predictions
ts.plot(serie,tl,tu,pr,lty=c(1,2,2,1),col=c(1,4,4,2),xlim=ultim[1]+c(-3,+2),type="o",main="Model ARIMA(2,1,1)(0,1,1)_52")
abline(v=(ultim[1]-3):(ultim[1]+2),lty=3,col=4)
(previs.lin=window(cbind(tl,pr,tu,serie,error=round(serie-pr,3)),start=ultim))
obs=window(serie,start=ultim)
mod.RMSE2=sqrt(sum((obs-pr)^2)/12)
mod.MAE2=sum(abs(obs-pr))/12
mod.RMSPE2=sqrt(sum(((obs-pr)/obs)^2)/12)
mod.MAPE2=sum(abs(obs-pr)/obs)/12
data.frame("RMSE"=mod.RMSE2,"MAE"=mod.MAE2,"RMSPE"=mod.RMSPE2,"MAPE"=mod.MAPE2)
```{r}
mCI2=mean(tu-tl)
cat("\nMean Length CI: ",mCI2)
#Plot of the original airbcn series (thousands) and out-of-sample predictions
ts.plot(serie,tl,tu,pr,lty=c(1,2,2,1),col=c(1,4,4,2),xlim=ultim[1]+c(-3,+2),type="o",main="Model ARIMA(2,1,1)(0,1,1)_52", xlim=c(2017, 2020), ylim=c(0,50000))
#Plot of the original airbcn series (thousands) and out-of-sample predictions
ts.plot(serie,tl,tu,pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o",main="Model ARIMA(2,1,1)(0,1,1)_52", xlim=c(2017, 2020), ylim=c(0,50000))
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2020), ylim=c(0,50000))
modA=arima(lnserie, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
modB=arima(lnserie2, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52))
pred=predict(modB,n.ahead=12)
pr<-ts(c(tail(lnserie2,1),pred$pred),start=ultim,freq=52) # point prediction
se<-ts(c(0,pred$se),start=ultim,freq=52) # standard error
ts.plot(pr)
tl<-ts(exp(pr-1.96*se)-1,start=ultim,freq=52)
tu<-ts(exp(pr+1.96*se)-1,start=ultim,freq=52)
pr<-ts(exp(pr)-1,start=ultim,freq=52)
ts.plot(serie,tl,tu, pr,lty=c(1,2,2,1),col=c(1,4,4,2),type="o", xlim=c(2017, 2020), ylim=c(0,50000))
predicted=forecast(model2, 52)
plot(predicted, xlim=c(2010,2021), xlab='Years')
covid = ts(flu.usa$INF_ALL, start=2020, frequency=52)
lines(log(covid))
covid = ts(flu.usa$INF_ALL, start=1998, frequency=52)
lines(log(covid+1))
par(mfrow=c(1,1))
predicted=forecast(model2, 52)
plot(predicted, xlim=c(2010,2021), xlab='Years')
covid = ts(flu.usa$INF_ALL, start=1998, frequency=52)
lines(log(covid+1))
par(mfrow=c(1,1))
predicted=forecast(model2, 52)
plot(predicted, xlim=c(2010,2021), xlab='Years')
covid = ts(flu.usa$INF_ALL, start=2020, frequency=52)
lines(log(covid+1), color='r')
par(mfrow=c(1,1))
predicted=forecast(model2, 52)
plot(predicted, xlim=c(2010,2021), xlab='Years')
covid = ts(flu.usa$INF_ALL, start=1998, frequency=52)
lines(log(covid+1), color='r')
lines(log(covid+1), col='red')
par(mfrow=c(1,1))
predicted=forecast(model2, 52)
plot(predicted, xlim=c(2010,2021), xlab='Years')
covid = ts(flu.usa$INF_ALL, start=2020, frequency=52)
lines(log(covid+1), col='red')
par(mfrow=c(1,1))
predicted=forecast(model2, 52)
plot(predicted, xlim=c(2010,2021), xlab='Years')
covid = ts(flu.usa$INF_ALL, start=1998, frequency=52)
lines(log(covid+1), col='red')
par(mfrow=c(1,1))
predicted=forecast(model2, 52)
plot(predicted, xlim=c(2010,2021), xlab='Years')
covid = ts(flu.usa$INF_ALL, start=1998, frequency=52)
lines(log(covid+1)[(length(time(covid))-52)], col='red')
lines(log(covid+1)[(length(time(covid))-52)], col='red')
lines(window(covid, start=2020), col='red')
par(mfrow=c(1,1))
predicted=forecast(model2, 52)
plot(predicted, xlim=c(2010,2021), xlab='Years')
covid = log(ts(flu.usa$INF_ALL, start=1998, frequency=52) + 1)
lines(window(covid, start=2020), col='red')
source("atipics2.r")
##Detection of outliers: In this case, we have applied a regular and a seasonal differentiation of order $S=12$. We set the criterion to $crit = 2.8$ and also the argument LS to TRUE.
## The crit value chosen by the researcher is typically fixed around 3; the LS argument is optional (= TRUE if one aims to detect a level shift)
mod.atip=outdetec(model2,dif=c(1,52), crit=2.9, LS=T) # automatic detection of outliers with crit=2.8 and LS =TRUE
#Estimated residual variance after outliers detection and treatment
mod.atip$sigma
atipics=mod.atip$atip[order(mod.atip$atip[,1]),]
weeks = c()
for (w in seq(1, 52)) {
week = sprintf("%02d", w)
weeks = append(weeks, week)
}
data.frame(atipics,Fecha=paste(weeks[(atipics[,1]-1)%%52+1],start(lnserie)[1]+((atipics[,1]-1)%/%52)),perc.Obs=exp(atipics[,3])*100)
lnserie.lin=lineal(lnserie, mod.atip$atip)
serie.lin=exp(lnserie.lin)
plot(serie.lin,col=2)
lines(serie)
plot(lnserie-lnserie.lin)
lnserie.lin=lineal(lnserie, mod.atip$atip)
serie.lin=exp(lnserie.lin)
plot(serie.lin,col=2)
lines(serie)
lnserie.lin=lineal(lnserie, mod.atip$atip)
serie.lin=exp(lnserie.lin)
plot(serie.lin,col=2)
lines(serie)
boxcox(serie)
library(mass)
boxcox(serie)
library(MASS)
boxcox(serie)
serie
BoxCox(serie)
BoxCox.lambda(serie)
serie+1
serie
BoxCox.lambda(serie+1)
boxplot(serie~floor(time(serie)), xlab='time (years)')
boxplot(lnserie~floor(time(serie)), xlab='time (years)')
par(mfrow=c(1,2))
plot(serie)
abline(v=1990:2022,col=4,lty=3)
lnserie <- log(serie + 1) #Log(x+1) instead of log(x) as log(x) generates infinities for zero values.
plot(lnserie)
abline(v=1990:2022,col=4,lty=3)
model2<-arima(d1d52lnserie, order = c(2,0,1), seasonal = list(order=c(1,0,1), period=52))
model2$aic
model2$coef
cat("\nT-ratios:",round(model2$coef/sqrt(abs(diag(model2$var.coef))),2))
cat("\nSignificant?:",abs(model2$coef/sqrt(abs(diag(model2$var.coef))))>2)
model2<-arima(lnserie, order = c(2,1,1), seasonal = list(order=c(1,1,1), period=52))
model2$aic
model2$coef
cat("\nT-ratios:",round(model2$coef/sqrt(diag(model2$var.coef)),2))
cat("\nSignificant?:",abs(model2$coef/sqrt(diag(model2$var.coef)))>2)
model2_coef_change<-arima(lnserie, order = c(2,1,1), seasonal = list(order=c(0,1,1), period=52)) #Setting sar1 to 0.
model2_coef_change$aic
model2_coef_change$coef
cat("\nT-ratios:",round(model2_coef_change$coef/sqrt(diag(model2_coef_change$var.coef)),2))
cat("\nSignificant?:",abs(model2_coef_change$coef/sqrt(diag(model2_coef_change$var.coef)))>2)
model2 = model2_coef_change
